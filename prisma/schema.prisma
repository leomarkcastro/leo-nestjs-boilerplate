// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider = "prisma-class-generator"
  dryRun   = false
  output   = "../generated/prisma-classes"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Role               Role?                @relation(fields: [roleId], references: [id], onDelete: SetNull)
  roleId             String?
  firstName          String?
  lastName           String?
  description        String?
  phone              String?
  avatar             String?
  address            String?
  LocalAuth          LocalAuth?
  NotificationOnUser NotificationOnUser[]
  FileOnUser         FileOnUser[]
  CalendarOnUser     CalendarOnUser[]
  Department         Department?          @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentId       String?
  Position           Position?            @relation(fields: [positionId], references: [id], onDelete: SetNull)
  positionId         String?
  UserOnBoard        UserOnBoard[]
}

model LocalAuth {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  User               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String    @unique
  twofaEmail         Boolean?
  twofaEmailSecret   String?
  twofaEmailLastSent DateTime?
  password           String
}

model Role {
  id               String             @id @default(cuid())
  name             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Users            User[]
  PermissionOnRole PermissionOnRole[]
  isCustom         Boolean?
}

model Permission {
  id               String             @id @default(cuid())
  name             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  PermissionOnRole PermissionOnRole[]
}

model PermissionOnRole {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String
  Permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  @@unique([roleId, permissionId])
}

model File {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String
  url        String
  type       String
  size       Int
  FileOnUser FileOnUser[]
  FileOnTask FileOnTask[]
}

model FileOnUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String?
  File      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([fileId, userId])
  @@unique([fileId, userId, type])
}

model Notification {
  id                 String               @id @default(cuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  type               String
  title              String
  content            String?
  NotificationOnUser NotificationOnUser[]
}

model NotificationOnUser {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  type           String?
  hasRead        Boolean      @default(false)
  Notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId String
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String

  @@unique([notificationId, userId])
  @@unique([notificationId, userId, type])
}

model Board {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  Lists       List[]
  UserOnBoard UserOnBoard[]
}

model UserOnBoard {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String?
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String

  @@unique([userId, boardId])
  @@unique([userId, boardId, type])
}

model List {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  Board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  Tasks     Task[]
}

model Task {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  title       String
  priority    String
  dueDate     DateTime
  content     String?
  FileOnTask  FileOnTask[]
  List        List          @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      String
  TaskOnEvent TaskOnEvent[]
}

model FileOnTask {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String?
  File      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    String
  Task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String

  @@unique([fileId, taskId])
  @@unique([fileId, taskId, type])
}

model Calendar {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  title           String
  description     String?
  backgroundColor String
  textColor       String
  hasStatus       Boolean          @default(false)
  CalendarOnUser  CalendarOnUser[]
  Event           Event[]
}

model CalendarOnUser {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       String?
  Calendar   Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  calendarId String
  User       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  IsPublic   Boolean? @default(false)

  @@unique([calendarId, userId])
  @@unique([calendarId, userId, type])
  @@unique([calendarId, type, IsPublic])
}

model Event {
  id               String        @id @default(cuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  title            String
  description      String?
  backgroundColor  String?
  textColor        String?
  start            DateTime?
  end              DateTime?
  allDay           Boolean
  Calendar         Calendar      @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  calendarId       String
  TaskOnEvent      TaskOnEvent[]
  StatusBoard      StatusBoard?  @relation(fields: [statusBoardId], references: [id], onDelete: SetNull)
  statusBoardId    String?
  statusBoardIndex Int?
}

model TaskOnEvent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String?
  Task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  Event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String

  @@unique([taskId, eventId])
  @@unique([taskId, eventId, type])
}

model Department {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  User      User[]
}

model Position {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  User      User[]
}

model Contact {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName  String?
  email     String
  phone     String?
  address   String?
  company   String?
  jobTitle  String?
  note      String?
  avatar    String?
}

model UsedKeys {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       String
  type      String?
}

model StatusBoard {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  color     String
  index     Int
  Event     Event[]
}
