// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Role               Role?                @relation(fields: [roleId], references: [id])
  roleId             String?
  firstName          String?
  lastName           String?
  description        String?
  phone              String?
  avatar             String?
  address            String?
  LocalAuth          LocalAuth?
  NotificationOnUser NotificationOnUser[]
  FileOnUser         FileOnUser[]
  TaskOnUser         TaskOnUser[]
  CalendarOnUser     CalendarOnUser[]
  Department         Department?          @relation(fields: [departmentId], references: [id])
  departmentId       String?
  Position           Position?            @relation(fields: [positionId], references: [id])
  positionId         String?
  CaseOnUser         CaseOnUser[]
}

model LocalAuth {
  id                     String    @id @default(cuid())
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  User                   User      @relation(fields: [userId], references: [id])
  userId                 String    @unique
  twofa                  String?
  lastTwoFaRequest       DateTime?
  remainingLoginAttempts Int?
  lastSuccessLogin       DateTime?
  password               String
}

model Role {
  id               String             @id @default(cuid())
  name             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Users            User[]
  PermissionOnRole PermissionOnRole[]
}

model Permission {
  id               String             @id @default(cuid())
  name             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  PermissionOnRole PermissionOnRole[]
}

model PermissionOnRole {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  Permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
}

model File {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String
  url        String
  type       String
  size       Int
  FileOnUser FileOnUser[]
  FileOnTask FileOnTask[]
}

model FileOnUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String?
  File      File     @relation(fields: [fileId], references: [id])
  fileId    String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Notification {
  id                 String               @id @default(cuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  type               String
  title              String
  content            String?
  NotificationOnUser NotificationOnUser[]
}

model NotificationOnUser {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String
  User           User         @relation(fields: [userId], references: [id])
  userId         String
}

model Task {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  title       String
  priority    String
  dueDate     DateTime
  content     String?
  status      String
  TaskOnUser  TaskOnUser[]
  FileOnTask  FileOnTask[]
  TaskOnEvent TaskOnEvent[]
}

model FileOnTask {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String?
  File      File     @relation(fields: [fileId], references: [id])
  fileId    String
  Task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
}

model TaskOnUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String?
  Task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Calendar {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  title           String
  descrition      String?
  backgroundColor String
  textColor       String
  CalendarOnUser  CalendarOnUser[]
  Event           Event[]
}

model CalendarOnUser {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       String?
  Calendar   Calendar @relation(fields: [calendarId], references: [id])
  calendarId String
  User       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Event {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  title           String
  descrition      String?
  backgroundColor String?
  textColor       String?
  start           DateTime?
  end             DateTime?
  allDay          Boolean
  Calendar        Calendar      @relation(fields: [calendarId], references: [id])
  calendarId      String
  TaskOnEvent     TaskOnEvent[]
  CaseOnEvent     CaseOnEvent[]
}

model TaskOnEvent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String?
  Task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  Event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
}

model Case {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  title       String
  content     String?
  CaseOnUser  CaseOnUser[]
  CaseOnEvent CaseOnEvent[]
}

model CaseOnUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String?
  Case      Case     @relation(fields: [caseId], references: [id])
  caseId    String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
}

model CaseOnEvent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String?
  Case      Case     @relation(fields: [caseId], references: [id])
  caseId    String
  Event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
}

model Department {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  User      User[]
}

model Position {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  User      User[]
}

model Contact {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName  String
  email     String
  phone     String
  address   String
  company   String
  jobTitle  String
  note      String?
  avatar    String?
}
